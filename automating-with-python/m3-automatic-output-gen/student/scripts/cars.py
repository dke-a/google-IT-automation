#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails
import os

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales": 0}
  year_sales = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
        item["revenue"] = item_revenue
        max_revenue = item
    # TODO: also handle max sales
    if item["total_sales"] > max_sales["total_sales"]:
        max_sales = item
        
    # TODO: also handle most popular car_year
    year = item["car"]["car_year"]
    if year not in year_sales:
        year_sales[year] = 0
    year_sales[year] += item["total_sales"]

    popular_year = 0
    max_sales_year = 0

    for year,sales in year_sales.items():
       if sales > max_sales_year:
          max_sales_year = sales
          popular_year = year

  print(max_sales)
  print(year_sales)
  summary = [
    "The {} generated the most revenue: ${}.".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    f"The {format_car(max_sales['car'])} had the most sales: {max_sales['total_sales']}",
    f"The most popular year was {popular_year} with {max_sales_year} sales."
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  gen_summary = '<br/>'.join(map(str,summary))
  #print(summary)
  # TODO: turn this into a PDF report
  reports.generate("/tmp/cars.pdf", "Summary of Car Sales", gen_summary, cars_dict_to_table(data))


  # TODO: send the PDF report as an email attachment
  # Generate Email
  email_body = "\n".join(summary)  # Convert summary to a single string with '\n' for line breaks
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"

  message = emails.generate(sender, receiver, subject, email_body, "/tmp/cars.pdf")
  # Send Email
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)

